call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

set nocompatible " Disable vi-compability
set laststatus=2 " Always show the statusline

"set t_Co=256

" Gui options
if has("gui_running")
  :set guioptions-=T
  :set guioptions-=m
  :set guioptions-=r
  :set lines=30
  :set columns=100
  :set cursorline
endif

let g:tex_conceal= 'adgm'
hi Conceal guibg=White guifg=DarkMagenta

let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_CompileRule_pdf = 'pdflatex -interaction=nonstopmode $*'

au BufNewFile,BufRead *.pde set filetype=java

" Better modes.  Remeber where we are, support yankring
set viminfo=!,'100,\"100,:20,<50,s10,h,n~/.viminfo

" Move Backup Files to ~/.vim/sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" ViM persistent undo! 
set undodir=~/.vim/undodir
set undofile
set undolevels=1000

" Enable mouse everywhere
set mouse=a

" Fix backspace indentation
set backspace=indent,eol,start

" Default colourscheme
set background=dark
let g:molokai_original=1
colorscheme molokai

" Default font
set guifont=Inconsolata\ 11.5

" Omnicomplete

let g:SuperTabDefaultCompletionType = "context"

let g:CommandTMaxFiles=25000

" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart

" Remember cursor position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Enable filetype plugins and indention
filetype on
filetype plugin indent on
syntax on

set ruler
set number

" Better Search
set hlsearch
set incsearch
set showmatch

" Hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>

" <leader>v selects the just pasted text
nnoremap <leader>v V`]

" Copy/Paste to and from Desktop Environment
noremap <leader>yy "+y
noremap <leader>pp "+gP

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" Make the command line two lines high and change the statusline display to
" something that looks useful.
set cmdheight=2
set laststatus=2
set statusline=[%l,%v\ %P%M][CWD:\ %{CWD()}][FILE:\ %f]\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}\ %#warningmsg#%{SyntasticStatuslineFlag()}%*
set showcmd
set showmode

function! CWD()
    let curdir = substitute(getcwd(), '/home/mnazim', "~/", "g")
    return curdir
endfunction

" Tab Settings
set expandtab
set smarttab
set tabstop=2

set shiftwidth=2
set softtabstop=2
set tabstop=2

" I don't ever use jj in insert mode..
inoremap jj <Esc>

" Taglist
"let Tlist_Compact_Format = 1
"let Tlist_Ctags_Cmd = 'ctags'
"let Tlist_Enable_Fold_Column = 0
"let Tlist_Exist_OnlyWindow = 1
"let Tlist_File_Fold_Auto_Close = 0
"let Tlist_sort_type = "name"
let Tlist_Use_Right_Window = 1
"let TlistHighlightTag = 1
"let Tlist_Width = 40
"let Tlist_GainFocus_On_ToggleOpen = 1
"nnoremap <leader>l :Tlist<CR>
let g:tagbar_usearrows = 1
nnoremap <silent> <F3> :Tlist<CR>


" Next Tab
nnoremap <silent> <C-Right> :tabnext<CR>

" Previous Tab
nnoremap <silent> <C-Left> :tabprevious<CR>

" New Tab
nnoremap <silent> <C-t> :tabnew<CR>

" GUI Tab settings
function! GuiTabLabel()
  let label = ''
  let buflist = tabpagebuflist(v:lnum)
  if exists('t:title')
    let label .= t:title . ' '
  endif
  let label .= '[' . bufname(buflist[tabpagewinnr(v:lnum) - 1]) . ']'
  for bufnr in buflist
    if getbufvar(bufnr, '&modified')
      let label .= '+'
      break
    endif
  endfor
  return label
endfunction
set guitablabel=%{GuiTabLabel()}

" utf-8 default encoding
set enc=utf-8

" Javascript
" ----------
autocmd FileType javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 colorcolumn=79
let javascript_enable_domhtmlcss=1

" Fix email paragraphs
nnoremap <leader>par :%s/^>$//<CR>

if exists(":Tabularize")
  nmap <leader>a= :Tabularize /=<CR>
  vmap <leader>a= :Tabularize /=<CR>
  nmap <leader>a: :Tabularize /:\zs<CR>
  vmap <leader>a: :Tabularize /:\zs<CR>
endif

set wildignore+=*.o,*.obj,.bzr,.git,*.png,*.gif,*.jpg,*.eot,*.svg,*.woff,.hg,.svn,.DS_*,._*,.Trash*
set wildignore+=app/assets/images/**,public/**,tmp/**

let $JS_CMD='node'

" move a line of text using ALT+[jk], indent with ALT+[hl]
nnoremap <A-j> :m+<CR>==
nnoremap <A-k> :m-2<CR>==
nnoremap <A-h> <<
nnoremap <A-l> >>
inoremap <A-j> <Esc>:m+<CR>==gi
inoremap <A-k> <Esc>:m-2<CR>==gi
inoremap <A-h> <Esc><<`]a
inoremap <A-l> <Esc>>>`]a
vnoremap <A-j> :m'>+<CR>gv=gv
vnoremap <A-k> :m-2<CR>gv=gv
vnoremap <A-h> <gv
vnoremap <A-l> >gv
